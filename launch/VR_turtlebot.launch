<?xml version="1.0"?>

<launch>

	 <!-- "RunViveTracker.sh" -->
         <!--node name="Vrui_server" pkg="vrui_mdf" type="Vrui_server"/-->

	 <!-- turtlebot world -->
         <!--include file="$(find turtlebot_gazebo)/launch/turtlebot_world.launch"/-->

  	 <!-- Start Gazebo with wg world running in (max) realtime -->
  	 <!--include file="$(find hector_gazebo_worlds)/launch/rolling_landscape_120m.launch"/-->

  <arg name="world" default="worlds/empty.world"/>
  <!--arg name="world" value="$(find hector_gazebo_worlds)/worlds/rolling_landscape_120m.world"/-->
  <!--arg name="world" value="$(find hector_gazebo_worlds)/worlds/willow_garage.world"/--> 
  <arg name="gui" default="true"/>
  <arg name="args" default=""/>
  
  <param name="/use_sim_time" value="true" />

  <node name="gazebo" pkg="gazebo_ros" type="gzserver" args="$(arg world) $(arg args)" respawn="false" output="screen"/>
  

  <group if="$(arg gui)">
    <node name="gazebo_gui" pkg="gazebo_ros" type="gzclient" respawn="false" output="screen"/>
  </group>



  <!--arg name="world_file"  default="$(env TURTLEBOT_GAZEBO_WORLD_FILE)"/>

  <arg name="battery"   value="$(optenv TURTLEBOT_BATTERY /proc/acpi/battery/BAT0)"/>

  <arg name="stacks"    value="$(optenv TURTLEBOT_STACKS hexagons)"/>  
  <arg name="3d_sensor" value="$(optenv TURTLEBOT_3D_SENSOR kinect)"/>   
  
  <include file="$(find turtlebot_gazebo)/launch/includes/$(arg base).launch.xml">
    <arg name="base" value="$(arg base)"/>
    <arg name="stacks" value="$(arg stacks)"/>
    <arg name="3d_sensor" value="$(arg 3d_sensor)"/>
  </include>
  <-->
  
  <!--From turtlebot3_empty_world.launch-->
     <arg name="model" default="$(env TURTLEBOT3_MODEL)" doc="model type [burger]"/>
  <arg name="x_pos" default="0.0"/>
  <arg name="y_pos" default="0.0"/>
  <arg name="z_pos" default="0.0"/>

  <include file="$(find gazebo_ros)/launch/empty_world.launch">
    <arg name="world_name" value="$(find turtlebot3_gazebo)/worlds/empty.world"/>
    <arg name="paused" value="false"/>
    <arg name="use_sim_time" value="true"/>
    <arg name="gui" value="true"/>
    <arg name="headless" value="false"/>
    <arg name="debug" value="false"/>
  </include>

  <param name="robot_description" command="$(find xacro)/xacro --inorder $(find turtlebot3_description)/urdf/turtlebot3_$(arg model).urdf.xacro" />

  <node pkg="gazebo_ros" type="spawn_model" name="spawn_urdf" args="-urdf -model turtlebot3_$(arg model) -x $(arg x_pos) -y $(arg y_pos) -z $(arg z_pos) -param robot_description" />
  
  <node pkg="robot_state_publisher" type="robot_state_publisher" name="robot_state_publisher">
    <param name="publish_frequency" type="double" value="30.0" />
  </node>
  
  
  
  
  <!-- Fake laser -->
  <node pkg="nodelet" type="nodelet" name="laserscan_nodelet_manager" args="manager"/>
  <node pkg="nodelet" type="nodelet" name="depthimage_to_laserscan"
        args="load depthimage_to_laserscan/DepthImageToLaserScanNodelet laserscan_nodelet_manager">
    <param name="scan_height" value="10"/>
    <param name="output_frame_id" value="/camera_depth_frame"/>
    <param name="range_min" value="0.45"/>
    <remap from="image" to="/camera/depth/image_raw"/>
    <remap from="scan" to="/scan"/>
  </node>

	 <!-- talk to vrui server -->
         <node name="opentracking" pkg="openvr_headset_ros" type="opentracking"/>

         <!-- display for Vive HMD -->
         <node name="imagesub" pkg="openvr_headset_ros" type="imagesub"/>

         <!-- use right controller to control the robot -->
         <node name="controllers" pkg="openvr_headset_ros" type="controllers"/>

	 <!-- spawn model for controller.cpp -->
	 <node name="spawn_model_liftcontroller" pkg="gazebo_ros" type="spawn_model"
	 args="-file $(find openvr_headset_ros)/models/controller/model.sdf -sdf -model waypoint 
	 -x 0 -y 0 -z 1" output="screen" />

	 <!-- use left trigger to change standingpoint -->
         <!--node name="standingpoint" pkg="vrui_mdf" type="standingpoint"/-->

</launch>
